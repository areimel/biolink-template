---
// QRControls component for QR code generation interface
import { Icon } from 'astro-icon/components';

interface Props {
  liveUrl?: string;
  onGenerate?: string;
  onUrlChange?: string;
  onSizeChange?: string;
}

const { liveUrl = "", onGenerate, onUrlChange, onSizeChange } = Astro.props;
---

<style>
  .qr-input:focus {
    border-color: var(--biolink-input-focus-border) !important;
  }

  .qr-select:focus {
    border-color: var(--biolink-input-focus-border) !important;
  }

  .qr-generate-btn:hover {
    background-color: var(--biolink-primary-button-hover-background) !important;
  }

  .qr-input.valid {
    border-color: #10b981 !important;
  }

  .qr-input.invalid {
    border-color: #ef4444 !important;
  }

  .validation-message {
    transition: all 0.2s ease-in-out;
  }
</style>

<div class="qr-controls-container space-y-4 w-full">
  <!-- URL Input Field -->
  <div class="form-group">
    <label for="qr-url" class="block mb-2 font-heading text-md font-bold" style="color: var(--biolink-body-text-color)">
      URL to encode
    </label>
    <input
      type="url"
      name="qr-url"
      id="qr-url"
      value={liveUrl}
      placeholder="https://your-website.com"
      required
      class="w-full px-4 py-3 neo-border rounded-lg bg-white qr-input focus:outline-none font-courier-prime"
      style="color: var(--biolink-input-text); border-color: var(--biolink-input-border);"
    />
    <div id="url-validation" class="validation-message mt-2 hidden">
      <p id="url-valid" class="text-green-600 text-sm font-courier-prime hidden flex items-center gap-2">
        <Icon name="tabler:check" class="w-4 h-4" />
        <span>Valid URL</span>
      </p>
      <p id="url-invalid" class="text-red-600 text-sm font-courier-prime hidden flex items-center gap-2">
        <Icon name="tabler:alert-triangle" class="w-4 h-4" />
        <span>Please enter a valid URL</span>
      </p>
    </div>
  </div>

  <!-- Size Selector -->
  <div class="form-group">
    <label for="qr-size" class="block mb-2 font-heading text-md font-bold" style="color: var(--biolink-body-text-color)">
      QR Code Size
    </label>
    <select
      name="qr-size"
      id="qr-size"
      class="w-full px-4 py-3 neo-border rounded-lg bg-white qr-select focus:outline-none font-courier-prime cursor-pointer"
      style="color: var(--biolink-input-text); border-color: var(--biolink-input-border);"
    >
      <option value="256">256x256 pixels</option>
      <option value="512" selected>512x512 pixels</option>
      <option value="1024">1024x1024 pixels</option>
    </select>
  </div>

  <!-- Generate Button -->
  <div class="form-group">
    <button
      type="button"
      id="qr-generate-btn"
      class="w-full py-3 px-6 font-heading text-md rounded-lg qr-generate-btn font-bold neo-button flex items-center justify-center gap-3 disabled:opacity-50 disabled:cursor-not-allowed"
      style="background-color: var(--biolink-primary-button-background); color: var(--biolink-primary-button-text);"
      disabled
    >
      <Icon name="tabler:qrcode" class="w-6 h-6" />
      <span>Generate QR Code</span>
    </button>
  </div>
</div>

<script is:inline define:vars={{ onGenerate, onUrlChange, onSizeChange }}>
  // URL validation regex
  const urlPattern = /^https?:\/\/(?:[-\w.])+(?:\:[0-9]+)?(?:\/(?:[\w\/_.])*)?(?:\?(?:[\w&=%.])*)?(?:\#(?:[\w.])*)?$/;

  // Get DOM elements
  const urlInput = document.getElementById('qr-url');
  const sizeSelect = document.getElementById('qr-size');
  const generateBtn = document.getElementById('qr-generate-btn');
  const validationContainer = document.getElementById('url-validation');
  const validMessage = document.getElementById('url-valid');
  const invalidMessage = document.getElementById('url-invalid');

  // State
  let isValidUrl = false;

  // Validate URL function
  function validateUrl(url) {
    return url.length > 0 && urlPattern.test(url);
  }

  // Update validation UI
  function updateValidationUI(isValid, showMessage = true) {
    if (!showMessage) {
      validationContainer.classList.add('hidden');
      urlInput.classList.remove('valid', 'invalid');
      return;
    }

    validationContainer.classList.remove('hidden');

    if (isValid) {
      validMessage.classList.remove('hidden');
      invalidMessage.classList.add('hidden');
      urlInput.classList.add('valid');
      urlInput.classList.remove('invalid');
    } else {
      validMessage.classList.add('hidden');
      invalidMessage.classList.remove('hidden');
      urlInput.classList.add('invalid');
      urlInput.classList.remove('valid');
    }
  }

  // Update generate button state
  function updateGenerateButton() {
    if (isValidUrl) {
      generateBtn.disabled = false;
      generateBtn.style.opacity = '1';
    } else {
      generateBtn.disabled = true;
      generateBtn.style.opacity = '0.5';
    }
  }

  // Handle URL input changes
  function handleUrlChange() {
    const url = urlInput.value.trim();

    if (url.length === 0) {
      isValidUrl = false;
      updateValidationUI(false, false);
    } else {
      isValidUrl = validateUrl(url);
      updateValidationUI(isValidUrl, true);
    }

    updateGenerateButton();

    // Call external callback if provided
    if (onUrlChange && typeof window[onUrlChange] === 'function') {
      window[onUrlChange](url, isValidUrl);
    }

    // Emit custom event
    urlInput.dispatchEvent(new CustomEvent('qr-url-change', {
      detail: { url, isValid: isValidUrl },
      bubbles: true
    }));
  }

  // Handle size selection changes
  function handleSizeChange() {
    const size = parseInt(sizeSelect.value);

    // Call external callback if provided
    if (onSizeChange && typeof window[onSizeChange] === 'function') {
      window[onSizeChange](size);
    }

    // Emit custom event
    sizeSelect.dispatchEvent(new CustomEvent('qr-size-change', {
      detail: { size },
      bubbles: true
    }));
  }

  // Handle generate button click
  function handleGenerate() {
    if (!isValidUrl) return;

    const url = urlInput.value.trim();
    const size = parseInt(sizeSelect.value);

    // Call external callback if provided
    if (onGenerate && typeof window[onGenerate] === 'function') {
      window[onGenerate](url, size);
    }

    // Emit custom event
    generateBtn.dispatchEvent(new CustomEvent('qr-generate', {
      detail: { url, size },
      bubbles: true
    }));
  }

  // Event listeners
  if (urlInput && sizeSelect && generateBtn) {
    // URL input events
    urlInput.addEventListener('input', handleUrlChange);
    urlInput.addEventListener('blur', handleUrlChange);

    // Size select events
    sizeSelect.addEventListener('change', handleSizeChange);

    // Generate button events
    generateBtn.addEventListener('click', handleGenerate);

    // Initial validation
    handleUrlChange();
  }
</script>