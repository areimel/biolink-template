---
// QrCodeScript.astro - Centralized QR code JavaScript functionality
// This component provides all QR code generation, copy, and download functionality
// with comprehensive debugging and auto-generation support
---

<script>
console.log('üöÄ QrCodeScript: Component loaded');

// Global QR code functionality
let QRCode: any = null;
let isQRCodeLibraryLoaded = false;

// Load QRCode library dynamically
async function loadQRCodeLibrary() {
  if (isQRCodeLibraryLoaded && QRCode) {
    console.log('‚úÖ QrCodeScript: QRCode library already loaded');
    return true;
  }

  try {
    console.log('üì¶ QrCodeScript: Loading QRCode library...');
    const qrModule = await import('qrcode');
    QRCode = qrModule.default;
    isQRCodeLibraryLoaded = true;
    console.log('‚úÖ QrCodeScript: QRCode library loaded successfully');
    return true;
  } catch (error) {
    console.error('‚ùå QrCodeScript: Failed to load QRCode library:', error);
    return false;
  }
}

// Verify canvas is ready for rendering
function verifyCanvasReadiness(canvas: HTMLCanvasElement): boolean {
  console.log('üîç QrCodeScript: Verifying canvas readiness...');

  if (!canvas) {
    console.error('‚ùå QrCodeScript: Canvas element is null');
    return false;
  }

  // Check if canvas is properly attached to DOM
  if (!canvas.parentNode) {
    console.error('‚ùå QrCodeScript: Canvas is not attached to DOM');
    return false;
  }

  // Get canvas context to verify it's functional
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    console.error('‚ùå QrCodeScript: Cannot get 2D context from canvas');
    return false;
  }

  console.log('‚úÖ QrCodeScript: Canvas is ready for rendering');
  console.log('üìä QrCodeScript: Canvas dimensions:', canvas.width, 'x', canvas.height);
  console.log('üé® QrCodeScript: Canvas context:', ctx);

  return true;
}

// Generate QR code on canvas with enhanced verification
async function generateQRCode(canvas: HTMLCanvasElement, url: string, size: number = 512): Promise<boolean> {
  console.log('üîÑ QrCodeScript: generateQRCode called');
  console.log('üìù QrCodeScript: URL:', url);
  console.log('üìè QrCodeScript: Size:', size);
  console.log('üé® QrCodeScript: Canvas element:', canvas);

  if (!url || url.trim() === '') {
    console.error('‚ùå QrCodeScript: No URL provided');
    return false;
  }

  // Verify canvas readiness
  if (!verifyCanvasReadiness(canvas)) {
    console.error('‚ùå QrCodeScript: Canvas verification failed');
    return false;
  }

  // Ensure QRCode library is loaded
  const libraryLoaded = await loadQRCodeLibrary();
  if (!libraryLoaded) {
    console.error('‚ùå QrCodeScript: QRCode library not available');
    return false;
  }

  try {
    console.log('üé® QrCodeScript: Setting canvas dimensions...');

    // Store original canvas properties for debugging
    const originalWidth = canvas.width;
    const originalHeight = canvas.height;

    canvas.width = size;
    canvas.height = size;

    console.log(`üìê QrCodeScript: Canvas dimensions changed from ${originalWidth}x${originalHeight} to ${canvas.width}x${canvas.height}`);

    // Clear canvas before generating QR code
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      console.log('üßπ QrCodeScript: Canvas cleared');
    }

    console.log('üéØ QrCodeScript: Generating QR code...');
    await QRCode.toCanvas(canvas, url, {
      width: size,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#ffffff'
      }
    });

    // Verify QR code was actually drawn
    if (ctx) {
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const hasContent = imageData.data.some(pixel => pixel !== 255); // Check for non-white pixels

      if (hasContent) {
        console.log('‚úÖ QrCodeScript: QR code generated successfully - canvas has content');
      } else {
        console.warn('‚ö†Ô∏è QrCodeScript: QR code generated but canvas appears empty');
      }
    }

    return true;
  } catch (error) {
    console.error('‚ùå QrCodeScript: Error generating QR code:', error);
    return false;
  }
}

// Copy QR code to clipboard
async function copyQRCode(canvas: HTMLCanvasElement): Promise<boolean> {
  console.log('üìã QrCodeScript: copyQRCode called');

  if (!canvas) {
    console.error('‚ùå QrCodeScript: Canvas not found for copying');
    return false;
  }

  try {
    console.log('üîÑ QrCodeScript: Converting canvas to blob...');

    return new Promise((resolve) => {
      canvas.toBlob(async (blob) => {
        if (blob) {
          try {
            console.log('üìã QrCodeScript: Writing to clipboard...');
            const item = new ClipboardItem({ 'image/png': blob });
            await navigator.clipboard.write([item]);
            console.log('‚úÖ QrCodeScript: QR code copied to clipboard successfully');
            resolve(true);
          } catch (error) {
            console.error('‚ùå QrCodeScript: Failed to copy to clipboard:', error);
            resolve(false);
          }
        } else {
          console.error('‚ùå QrCodeScript: Failed to create blob from canvas');
          resolve(false);
        }
      }, 'image/png');
    });
  } catch (error) {
    console.error('‚ùå QrCodeScript: Error in copyQRCode:', error);
    return false;
  }
}

// Download QR code as image
function downloadQRCode(canvas: HTMLCanvasElement, filename: string = `qr-code-${Date.now()}.png`): boolean {
  console.log('üíæ QrCodeScript: downloadQRCode called');
  console.log('üìÅ QrCodeScript: Filename:', filename);

  if (!canvas) {
    console.error('‚ùå QrCodeScript: Canvas not found for download');
    return false;
  }

  try {
    console.log('üîÑ QrCodeScript: Creating download link...');
    const link = document.createElement('a');
    link.download = filename;
    link.href = canvas.toDataURL('image/png');
    link.click();
    console.log('‚úÖ QrCodeScript: QR code download initiated successfully');
    return true;
  } catch (error) {
    console.error('‚ùå QrCodeScript: Error downloading QR code:', error);
    return false;
  }
}

// Auto-generate QR code on page load if default URL exists
async function autoGenerateQRCode() {
  console.log('üîÑ QrCodeScript: Checking for auto-generation...');
  console.log('üïê QrCodeScript: Document readyState:', document.readyState);

  // Ensure we're fully client-side and DOM is ready
  const waitForElements = () => {
    return new Promise<void>((resolve) => {
      let attempts = 0;
      const maxAttempts = 50; // 5 seconds max wait

      const checkElements = () => {
        attempts++;
        console.log(`üîç QrCodeScript: Auto-generation attempt ${attempts}/${maxAttempts}`);

        const urlInput = document.getElementById('qr-url') as HTMLInputElement;
        const sizeSelect = document.getElementById('qr-size') as HTMLSelectElement;
        const canvas = document.getElementById('qr-canvas') as HTMLCanvasElement;

        console.log('üîç QrCodeScript: Auto-generation DOM elements check:');
        console.log('  - URL Input:', urlInput);
        console.log('  - Size Select:', sizeSelect);
        console.log('  - Canvas:', canvas);

        if (urlInput && canvas && urlInput.value.trim()) {
          console.log('‚úÖ QrCodeScript: All elements found, proceeding with auto-generation');
          resolve();
        } else if (attempts >= maxAttempts) {
          console.log('‚è∞ QrCodeScript: Max attempts reached, skipping auto-generation');
          resolve();
        } else {
          console.log(`‚è≥ QrCodeScript: Elements not ready, retrying in 100ms...`);
          setTimeout(checkElements, 100);
        }
      };

      checkElements();
    });
  };

  await waitForElements();

  const urlInput = document.getElementById('qr-url') as HTMLInputElement;
  const sizeSelect = document.getElementById('qr-size') as HTMLSelectElement;
  const canvas = document.getElementById('qr-canvas') as HTMLCanvasElement;

  if (urlInput && canvas && urlInput.value.trim()) {
    const url = urlInput.value.trim();
    const size = sizeSelect ? parseInt(sizeSelect.value) : 512;

    console.log('üöÄ QrCodeScript: Auto-generating QR code');
    console.log('  - URL:', url);
    console.log('  - Size:', size);

    const success = await generateQRCode(canvas, url, size);
    if (success) {
      console.log('‚úÖ QrCodeScript: Auto-generation completed successfully');
    } else {
      console.log('‚ùå QrCodeScript: Auto-generation failed');
    }
  } else {
    console.log('‚ÑπÔ∏è QrCodeScript: No auto-generation needed (missing elements or URL)');
  }
}

// Global event listeners
document.addEventListener('qr-generate', async (event: any) => {
  console.log('üéß QrCodeScript: Received qr-generate event');
  console.log('üì¶ QrCodeScript: Event detail:', event.detail);

  const { url, size } = event.detail;
  const canvas = document.getElementById('qr-canvas') as HTMLCanvasElement;

  if (canvas) {
    const success = await generateQRCode(canvas, url, size);
    console.log(success ? '‚úÖ QrCodeScript: Event-triggered generation successful' : '‚ùå QrCodeScript: Event-triggered generation failed');
  } else {
    console.error('‚ùå QrCodeScript: Canvas not found for event-triggered generation');
  }
});

document.addEventListener('qr-copy', async () => {
  console.log('üéß QrCodeScript: Received qr-copy event');
  const canvas = document.getElementById('qr-canvas') as HTMLCanvasElement;

  if (canvas) {
    const success = await copyQRCode(canvas);
    console.log(success ? '‚úÖ QrCodeScript: Copy operation successful' : '‚ùå QrCodeScript: Copy operation failed');
  } else {
    console.error('‚ùå QrCodeScript: Canvas not found for copy operation');
  }
});

document.addEventListener('qr-download', () => {
  console.log('üéß QrCodeScript: Received qr-download event');
  const canvas = document.getElementById('qr-canvas') as HTMLCanvasElement;

  if (canvas) {
    const success = downloadQRCode(canvas);
    console.log(success ? '‚úÖ QrCodeScript: Download operation successful' : '‚ùå QrCodeScript: Download operation failed');
  } else {
    console.error('‚ùå QrCodeScript: Canvas not found for download operation');
  }
});

// Client-side initialization with hydration verification
function initializeQRCodeScript() {
  console.log('üéØ QrCodeScript: Client-side initialization starting...');
  console.log('üåê QrCodeScript: Window available:', typeof window !== 'undefined');
  console.log('üìÑ QrCodeScript: Document available:', typeof document !== 'undefined');
  console.log('üïê QrCodeScript: Document readyState:', document.readyState);

  // Ensure we're running client-side
  if (typeof window === 'undefined' || typeof document === 'undefined') {
    console.error('‚ùå QrCodeScript: Running in non-browser environment, skipping initialization');
    return;
  }

  console.log('‚úÖ QrCodeScript: Browser environment confirmed, proceeding with initialization');

  // Initialize auto-generation with proper timing
  if (document.readyState === 'loading') {
    console.log('‚è≥ QrCodeScript: Document still loading, waiting for DOMContentLoaded...');
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üéØ QrCodeScript: DOMContentLoaded fired, initializing...');
      setTimeout(() => autoGenerateQRCode(), 50); // Small delay to ensure hydration
    });
  } else {
    console.log('üéØ QrCodeScript: DOM already loaded, initializing with delay...');
    setTimeout(() => autoGenerateQRCode(), 100); // Delay to ensure component hydration
  }
}

// Start initialization
initializeQRCodeScript();

console.log('‚úÖ QrCodeScript: Component script initialization complete');
</script>